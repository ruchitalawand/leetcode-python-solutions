#  Maximize the Number of Partitions After Operations

class Solution:
    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:
        n = len(s)
        
        # Function to simulate partition count
        def count_partitions(t: str) -> int:
            count = 0
            freq = {}
            distinct = 0
            
            for ch in t:
                if ch not in freq or freq[ch] == 0:
                    distinct += 1
                freq[ch] = freq.get(ch, 0) + 1
                
                # If distinct > k â†’ new partition starts
                if distinct > k:
                    count += 1
                    freq = {ch: 1}
                    distinct = 1
            return count + 1  # for last partition
        
        # Base count without any change
        ans = count_partitions(s)
        
        # Try changing one character at each position
        for i in range(n):
            original = s[i]
            for c in "abcdefghijklmnopqrstuvwxyz":
                if c == original:
                    continue
                new_s = s[:i] + c + s[i+1:]
                ans = max(ans, count_partitions(new_s))
        
        return ans
