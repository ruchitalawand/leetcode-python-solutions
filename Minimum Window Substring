# Minimum Window Substring

from collections import Counter

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if not s or not t:
            return ""
        
        dict_t = Counter(t)
        required = len(dict_t)  # unique chars to be satisfied
        
        l, r = 0, 0
        formed = 0
        window_counts = {}
        min_len = float('inf')
        min_left = 0
        
        while r < len(s):
            char = s[r]
            window_counts[char] = window_counts.get(char, 0) + 1
            
            if char in dict_t and window_counts[char] == dict_t[char]:
                formed += 1
            
            # Try to shrink the window
            while l <= r and formed == required:
                if r - l + 1 < min_len:
                    min_len = r - l + 1
                    min_left = l
                
                left_char = s[l]
                window_counts[left_char] -= 1
                if left_char in dict_t and window_counts[left_char] < dict_t[left_char]:
                    formed -= 1
                l += 1
            
            r += 1
        
        return "" if min_len == float('inf') else s[min_left:min_left + min_len]
