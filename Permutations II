Permutations II

class Solution:
    def permuteUnique(self, nums: list[int]) -> list[list[int]]:
        nums.sort()  # sort to handle duplicates
        res = []
        visited = [False] * len(nums)
        
        def backtrack(path):
            if len(path) == len(nums):
                res.append(path[:])
                return
            for i in range(len(nums)):
                if visited[i]:
                    continue
                # skip duplicates
                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:
                    continue
                # choose
                visited[i] = True
                path.append(nums[i])
                # explore
                backtrack(path)
                # undo
                path.pop()
                visited[i] = False
        
        backtrack([])
        return res
