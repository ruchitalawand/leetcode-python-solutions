Permutations

class Solution:
    def permute(self, nums: list[int]) -> list[list[int]]:
        res = []

        def backtrack(path, remaining):
            if not remaining:
                res.append(path)
                return
            for i in range(len(remaining)):
                # choose
                new_path = path + [remaining[i]]
                # explore
                backtrack(new_path, remaining[:i] + remaining[i+1:])
                # no need to explicitly undo because we use new lists

        backtrack([], nums)
        return res
